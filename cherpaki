#Реализация алгоритма Дейкстры с использованием черпака
import heapq

def dijkstra(graph, start):
# Инициализация расстояний до всех вершин как бесконечность
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
# Создаем кучу и помещаем стартовую вершину с расстоянием 0
priority_queue = [(0, start)]  # (расстояние, вершина)
while priority_queue:
current_distance, current_vertex = heapq.heappop(priority_queue)
        
# Если текущее расстояние больше, чем уже найденное, пропускаем
if current_distance > distances[current_vertex]:
continue
# Проверяем все соседние вершины
for neighbor, weight in graph[current_vertex].items():
distance = current_distance + weight
# Если новый путь к соседу короче, обновляем расстояние
if distance < distances[neighbor]:
distances[neighbor] = distance
heapq.heappush(priority_queue, (distance, neighbor))
return distances

# Пример графа
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Вызов алгоритма Дейкстры
start_vertex = 'A'
distances = dijkstra(graph, start_vertex)

print(f"Кратчайшие расстояния от вершины {start_vertex}: {distances}")

#Тестирование алгоритма
graph_1 = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Прогоняем алгоритм на простом графе
start_vertex = 'A'
distances_1 = dijkstra(graph_1, start_vertex)
print(f"Результаты для графа 1: {distances_1}")

#Визуализация 
import matplotlib.pyplot as plt
import networkx as nx

# Создаем граф для визуализации
G = nx.Graph()
G.add_edges_from([('A', 'B', {'weight': 1}), 
                 ('A', 'C', {'weight': 4}),
                 ('B', 'C', {'weight': 2}),
                 ('B', 'D', {'weight': 5}),
                 ('C', 'D', {'weight': 1})])

# Отображаем граф с весами рёбер
pos = nx.spring_layout(G)
labels = nx.get_edge_attributes(G, 'weight')

plt.figure(figsize=(8, 6))
nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=15, font_weight='bold')
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

plt.title("Граф с весами рёбер")
plt.show()

#Сравнение с другими алгоритмами
def bellman_ford(graph, start):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0

    for _ in range(len(graph) - 1):
        for vertex in graph:
            for neighbor, weight in graph[vertex].items():
                if distances[vertex] + weight < distances[neighbor]:
                    distances[neighbor] = distances[vertex] + weight

    return distances

# Прогоняем алгоритм Беллмана-Форда
bf_distances = bellman_ford(graph_1, 'A')
print(f"Результаты для алгоритма Беллмана-Форда: {bf_distances}")
